# unicorn -c /mnt/app/current/system/unicorn.config -E production -D
 
max_workers = 4
rails_env = ENV['RAILS_ENV'] || 'production'

# 6 workers and 1 master
worker_processes (rails_env == 'production' ? max_workers : 4)
 
working_directory "/mnt/app/current"

# Load rails+github.git into the master before forking workers
# for super-fast worker spawn times
preload_app true
 
# Restart any workers that haven't responded in 30 seconds
timeout 60
 
pid "/mnt/app/shared/pids/unicorn.pid"

listen (rails_env == 'production' ? "0.0.0.0:4242" : "0.0.0.0:4242")

ENV['RUBY_HEAP_MIN_SLOTS'] = '750000'
ENV['RUBY_HEAP_SLOTS_INCREMENT'] = '333000'
ENV['RUBY_HEAP_SLOTS_GROWTH_FACTOR'] = '1'
ENV['RUBY_GC_MALLOC_LIMIT'] = '75000000'

##
# REE
# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end
 
before_fork do |server, worker|

  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!

  # This allows a new master process to incrementally
  # phase out the old master process with SIGTTOU to avoid a
  # thundering herd (especially in the "preload_app false" case)
  # when doing a transparent upgrade.  The last worker spawned
  # will then kill off the old master process with a SIGQUIT.
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
  
  # throttle the master from forking too quickly by sleeping
  sleep 1
end
 
 
after_fork do |server, worker|
 
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket
 
end
