#-------------------------------------------------------------------------
#-- nginx.conf
#-- nginx config file for Gowalla. Using "fair" load balancing module
#-- and proxying to backends running Unicorn. Yes. Unicorn.
#--
#-- Seriously, get over your mythical creature phobia.
#--
#-- to reload config on the fly, HUP the master nginx process:
#--   ps -ef | grep nginx 
#--   kill -HUP ##### 
#-- 
#-- TODO: add memcached hooks if applicable/possible
#-------------------------------------------------------------------------
# number of nginx workers
worker_processes  2;

# pid of nginx master process
pid /var/run/nginx.pid;

# Number of worker connections. 
# Multiply by worker_processes for max number of connections at once
events {
	worker_connections 2048;
}

# start the http module where we config http access.
http {
	# pull in mime-types. You can break out your config 
	# into as many include's as you want to make it cleaner
	include /usr/local/nginx/conf/mime.types;

	# set a default type for the rare situation that
	# nothing matches from the mimie-type include
	default_type  application/octet-stream;

	# configure log format
	log_format main '$host $remote_addr - $remote_user [$time_local] '
	               '"$request" $status  $body_bytes_sent "$http_referer" '
	               '"$http_user_agent" "$http_x_forwarded_for"';

	log_format stats '$http_x_forwarded_for -:- $time_local -:- $request -:- $status -:- $request_time -:- $upstream_addr -:- $upstream_status -:- $upstream_response_time -:- $http_user_agent -:- $host';

	# main access log
	access_log  /mnt/log/nginx_access.log  main;

	# main error log
	error_log  /mnt/log/nginx_error.log error;

	# lets the kernel do the work instead of nginx resources
	# NOTE: No support on OS X
	sendfile on;

	# These are good default values.
	tcp_nopush        on;
	tcp_nodelay       off;

	# output compression saves bandwidth, at the cost of CPU time. I presume this is worthwhile esp. for the iphone, but maybe not for anything else.
	gzip              on;
	gzip_http_version 1.1;
	gzip_vary         on;
	gzip_comp_level   2;       # 1 is fastest/lowest, 9 is slowest/highest. 2 seems to be the most common, but I haven't seen benchmarks.
	gzip_proxied      any;
	gzip_buffers      16 8k;   # see http://blog.leetsoft.com/2007/7/25/nginx-gzip-ssl
	gzip_types        text/plain text/css application/x-javascript application/json text/xml application/xml application/xml+rss text/javascript image/png;
	gzip_disable      "MSIE [1-6]\.(?!.*SV1)"; # IE6preSP1 fails at gzip

	upstream unicorn {
		server 10.250.163.175:4242;
	}

	keepalive_timeout 5;

	# the server directive is nginx's virtual host directive.
	server {
		# port to listen on. Can also be set to an IP:PORT
		listen 80;

		# Set the max size for file uploads to 50Mb
		client_max_body_size 50M;

		# sets the domain[s] that this vhost server requests for
		server_name stats.gowalla.com;

		# doc root
		root /mnt/app/current/public;

		# vhost specific access log
		access_log  /mnt/log/nginx.vhost.access.log main;

		access_log  /mnt/log/nginx.stats.log stats;

		if ($request_method !~ ^(GET|HEAD|POST)$ ) {
			return 444;
		}

		location / {
			# needed to forward user's IP address to rails
			proxy_set_header  X-Real-IP  $http_x_forwarded_for;

			# needed for HTTPS
			proxy_set_header  X-Forwarded-For $http_x_fb_user_remote_addr;
			proxy_set_header Host $http_host;
			proxy_redirect false;
			proxy_max_temp_file_size 0;

			# If the file exists as a static file serve it directly without
			# running all the other rewite tests on it
			if (-f $request_filename) { 
			  break;
			}

			# check for index.html for directory index
			# if its there on the filesystem then rewite 
			# the url to add /index.html to the end of it
			# and then break to send it to the next config rules.
			if (-f $request_filename/index.html) {
			  rewrite (.*) $1/index.html break;
			}

			# this is the meat of the rails page caching config
			# it adds .html to the end of the url and then checks
			# the filesystem for that file. If it exists then we
			# rewite the url to have explicit .html on the end 
			# and then send it on its way to the next config rule.
			# if there is no file on the fs then it sets all the 
			# necessary headers and proxies to our upstream mongrels
			if (-f $request_filename.html) {
			  rewrite (.*) $1.html break;
			}

			if (!-f $request_filename) {
				proxy_pass http://unicorn;
				break;
			}
		}

		error_page   500 502 503 504  /500.html;
		location = /500.html {
			root   /mnt/app/current/public;
		}

		error_page   405 =200  /down.html;
	}
}
